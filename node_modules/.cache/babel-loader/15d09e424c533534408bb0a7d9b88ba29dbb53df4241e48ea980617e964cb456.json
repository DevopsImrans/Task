{"ast":null,"code":"import _slicedToArray from \"D:/dummy/react-tutorial-solutions/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"D:/dummy/react-tutorial-solutions/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/dummy/react-tutorial-solutions/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/dummy/react-tutorial-solutions/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/dummy/react-tutorial-solutions/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"D:\\\\dummy\\\\react-tutorial-solutions\\\\src\\\\components\\\\Game.js\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport \"../index.css\";\nvar Game = /*#__PURE__*/function (_React$Component) {\n  _inherits(Game, _React$Component);\n  var _super = _createSuper(Game);\n  function Game() {\n    var _this;\n    _classCallCheck(this, Game);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.initialize = function () {\n      return {\n        history: [{\n          squares: Array(9).fill(null),\n          location: {\n            col: 0,\n            row: 0\n          },\n          active: false,\n          moveNumber: 0\n        }],\n        xIsNext: true,\n        stepNumber: 0,\n        toggle: false\n      };\n    };\n    _this.state = _this.initialize();\n    _this.reset = function () {\n      _this.setState(_this.initialize());\n    };\n    _this.jumpTo = function (step) {\n      var history = _this.state.history;\n      history.forEach(function (item) {\n        item.active = false;\n      });\n      history[step].active = true;\n      _this.setState({\n        history: history,\n        stepNumber: step,\n        xIsNext: step % 2 === 0\n      });\n    };\n    _this.handleClick = function (i) {\n      /**\r\n       * If we jumped to some previous step, and then make\r\n       * a new move from that point, we throw away all \"future\"\r\n       * history that will now become irrelevant.\r\n       *\r\n       * slice(startingPoint, endPoint)\r\n       *\r\n       * startingPoint - Array index from where the \"slicing\" starts.\r\n       * endPoint - All array indices less than endPoint will be included in \"slicing\"\r\n       */\n      var history = _this.state.history.slice(0, _this.state.stepNumber + 1);\n      var current = history[history.length - 1];\n      var squares = current.squares.slice();\n      var columns = 3;\n\n      /**\r\n       * Calculate location of square when clicked\r\n       */\n      var col = Math.floor(i % columns) + 1;\n      var row = Math.floor(i / columns) + 1;\n      if (_this.calculateWinner(squares) || squares[i]) {\n        return;\n      }\n      squares[i] = _this.state.xIsNext ? \"X\" : \"O\";\n\n      /**\r\n       * concat() method does not mutate the Array\r\n       * unlike Array.push().\r\n       */\n      _this.setState(function (prevState) {\n        return {\n          history: history.concat([{\n            squares: squares,\n            location: {\n              col: col,\n              row: row\n            },\n            active: false,\n            moveNumber: history.length\n          }]),\n          xIsNext: !prevState.xIsNext,\n          stepNumber: history.length\n        };\n      });\n    };\n    _this.toggleMoves = function () {\n      var toggle = !_this.state.toggle;\n      _this.setState({\n        toggle: toggle\n      });\n    };\n    _this.calculateWinner = function (squares) {\n      var lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n      var result = {\n        status: \"\",\n        win: {}\n      };\n      for (var i = 0; i < lines.length; i++) {\n        var _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          result = {\n            status: \"win\",\n            win: {\n              player: squares[a],\n              squares: [a, b, c]\n            }\n          };\n          return result;\n        }\n      }\n      var tempSq = squares.filter(function (item) {\n        return item === null;\n      });\n      if (tempSq.length === 0) {\n        result = {\n          status: \"draw\",\n          win: {}\n        };\n        return result;\n      }\n      return null;\n    };\n    return _this;\n  }\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var history = this.state.history;\n      var current = history[this.state.stepNumber];\n      var result = this.calculateWinner(current.squares);\n      var gameStatus = result && result.status ? result.status : null;\n      var moves = history.map(function (move, index) {\n        var desc = index ? \"Go to move #\" + index : \"Go to game start\";\n        var active = \"\";\n        if (move.active) {\n          active = \"active\";\n        } else {\n          active = \"normal\";\n        }\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          className: active,\n          key: \"\".concat(move.location.col, \"_\").concat(move.location.row),\n          onClick: function onClick() {\n            return _this2.jumpTo(index);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 11\n          }\n        }, \"\".concat(desc, \" (\").concat(move.location.col, \", \").concat(move.location.row, \")\")));\n      });\n\n      /**\r\n       * If this.state.toggle is \"true\", sort in\r\n       * \"decending order\" and vice versa.\r\n       */\n      moves.sort(function (a, b) {\n        if (_this2.state.toggle) {\n          return b.key - a.key;\n        } else {\n          return a.key - b.key;\n        }\n      });\n      var status;\n      if (gameStatus === \"win\") {\n        status = \"Winner: \".concat(result.win.player);\n      } else {\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"game\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 7\n        }\n      },\n      /** If there is a draw, hide the game board and show \r\n       \"Play again\" button */\n      gameStatus === \"draw\" ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"draw\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }\n      }, \"Draw!\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.reset();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }\n      }, \"Play again\")) :\n      /*#__PURE__*/\n      /** Otherwise, show the game board */\n      React.createElement(\"div\", {\n        className: \"game-board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Board, {\n        squares: current.squares,\n        winningSquares: gameStatus === \"win\" ? result.win.squares : [],\n        onClick: function onClick(i, col, row) {\n          return _this2.handleClick(i, col, row);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }\n      }),\n      /** Depending upon the state of the game, either show \r\n       \"Play again\" button or \"Reset game\" button */\n      gameStatus === \"win\" ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"win\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }\n      }, \"\\\"\".concat(result.win.player, \"\\\" is winner!\")), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.reset();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }\n      }, \"Play again\")) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"reset\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.reset();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 17\n        }\n      }, \"Reset game\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"game-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }\n      }, status), /** Show the toggle button only if there are two or more moves to sort */\n      history.length > 1 ? /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.toggleMoves();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }\n      }, \"Toggle moves\") : \"\", /*#__PURE__*/React.createElement(\"ol\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }\n      }, moves)));\n    }\n  }]);\n  return Game;\n}(React.Component);\nexport default Game;","map":{"version":3,"names":["React","Board","Game","initialize","history","squares","Array","fill","location","col","row","active","moveNumber","xIsNext","stepNumber","toggle","state","reset","setState","jumpTo","step","forEach","item","handleClick","i","slice","current","length","columns","Math","floor","calculateWinner","prevState","concat","toggleMoves","lines","result","status","win","a","b","c","player","tempSq","filter","gameStatus","moves","map","move","index","desc","sort","key","Component"],"sources":["D:/dummy/react-tutorial-solutions/src/components/Game.js"],"sourcesContent":["import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"../index.css\";\r\n\r\nclass Game extends React.Component {\r\n  /**\r\n   * Initial state of the game\r\n   */\r\n  initialize = () => {\r\n    return {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n          location: {\r\n            col: 0,\r\n            row: 0\r\n          },\r\n          active: false,\r\n          moveNumber: 0\r\n        }\r\n      ],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n      toggle: false\r\n    };\r\n  };\r\n\r\n  state = this.initialize();\r\n\r\n  reset = () => {\r\n    this.setState(this.initialize());\r\n  };\r\n\r\n  jumpTo = step => {\r\n    let history = this.state.history;\r\n\r\n    history.forEach(item => {\r\n      item.active = false;\r\n    });\r\n\r\n    history[step].active = true;\r\n    this.setState({\r\n      history: history,\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0\r\n    });\r\n  };\r\n\r\n  handleClick = i => {\r\n    /**\r\n     * If we jumped to some previous step, and then make\r\n     * a new move from that point, we throw away all \"future\"\r\n     * history that will now become irrelevant.\r\n     *\r\n     * slice(startingPoint, endPoint)\r\n     *\r\n     * startingPoint - Array index from where the \"slicing\" starts.\r\n     * endPoint - All array indices less than endPoint will be included in \"slicing\"\r\n     */\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const columns = 3;\r\n\r\n    /**\r\n     * Calculate location of square when clicked\r\n     */\r\n    const col = Math.floor(i % columns) + 1;\r\n    const row = Math.floor(i / columns) + 1;\r\n\r\n    if (this.calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n\r\n    /**\r\n     * concat() method does not mutate the Array\r\n     * unlike Array.push().\r\n     */\r\n    this.setState(prevState => ({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          location: {\r\n            col: col,\r\n            row: row\r\n          },\r\n          active: false,\r\n          moveNumber: history.length\r\n        }\r\n      ]),\r\n      xIsNext: !prevState.xIsNext,\r\n      stepNumber: history.length\r\n    }));\r\n  };\r\n\r\n  toggleMoves = () => {\r\n    const toggle = !this.state.toggle;\r\n    this.setState({\r\n      toggle: toggle\r\n    });\r\n  };\r\n\r\n  calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    let result = {\r\n      status: \"\",\r\n      win: {}\r\n    };\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        result = {\r\n          status: \"win\",\r\n          win: { player: squares[a], squares: [a, b, c] }\r\n        };\r\n        return result;\r\n      }\r\n    }\r\n    let tempSq = squares.filter(item => item === null);\r\n    if (tempSq.length === 0) {\r\n      result = { status: \"draw\", win: {} };\r\n      return result;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const result = this.calculateWinner(current.squares);\r\n    const gameStatus = result && result.status ? result.status : null;\r\n\r\n    const moves = history.map((move, index) => {\r\n      const desc = index ? \"Go to move #\" + index : \"Go to game start\";\r\n\r\n      let active = \"\";\r\n      if (move.active) {\r\n        active = \"active\";\r\n      } else {\r\n        active = \"normal\";\r\n      }\r\n      return (\r\n        <li key={index}>\r\n          <button\r\n            className={active}\r\n            key={`${move.location.col}_${move.location.row}`}\r\n            onClick={() => this.jumpTo(index)}\r\n          >\r\n            {`${desc} (${move.location.col}, ${move.location.row})`}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    /**\r\n     * If this.state.toggle is \"true\", sort in\r\n     * \"decending order\" and vice versa.\r\n     */\r\n    moves.sort((a, b) => {\r\n      if (this.state.toggle) {\r\n        return b.key - a.key;\r\n      } else {\r\n        return a.key - b.key;\r\n      }\r\n    });\r\n\r\n    let status;\r\n\r\n    if (gameStatus === \"win\") {\r\n      status = `Winner: ${result.win.player}`;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        {/** If there is a draw, hide the game board and show \r\n          \"Play again\" button */\r\n        gameStatus === \"draw\" ? (\r\n          <div className=\"draw\">\r\n            <h2>Draw!</h2>\r\n            <button onClick={() => this.reset()}>Play again</button>\r\n          </div>\r\n        ) : (\r\n          /** Otherwise, show the game board */\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.squares}\r\n              winningSquares={gameStatus === \"win\" ? result.win.squares : []}\r\n              onClick={(i, col, row) => this.handleClick(i, col, row)}\r\n            />\r\n            {/** Depending upon the state of the game, either show \r\n              \"Play again\" button or \"Reset game\" button */\r\n            gameStatus === \"win\" ? (\r\n              <div className=\"win\">\r\n                <h2>{`\"${result.win.player}\" is winner!`}</h2>\r\n                <button onClick={() => this.reset()}>Play again</button>\r\n              </div>\r\n            ) : (\r\n              <div className=\"reset\">\r\n                <button onClick={() => this.reset()}>Reset game</button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          {/** Show the toggle button only if there are two or more moves to sort */\r\n          history.length > 1 ? (\r\n            <button onClick={() => this.toggleMoves()}>Toggle moves</button>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}